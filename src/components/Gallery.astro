---
// components/Gallery.astro
import Modal from "./Modal.jsx";

/** Props
 * @prop {Array<{src:string,date:string,artist:string}>} drawings â€“ already sorted newestâ†’oldest
 */
const { drawings } = Astro.props;
---

<section id="gallery" class="min-h-screen bg-transparent text-white p-4">
  <h2 class="text-3xl font-bold mb-6 text-center">ðŸŽ¨ Gallery</h2>

  <!-- Desktop gets 95 vw container; smaller screens stay full-width -->
  <div id="photos-grid" class="flex flex-wrap gap-2 md:gap-4 w-full lg:w-[95vw] mx-auto">
    {
      drawings.map((art, i) => (
        <img
          src={art.src}
          alt={`Art by ${art.artist}`}
          class="rounded-lg cursor-pointer object-cover"
          loading="lazy"
          onclick={`window.openModal(${i})`}/>
      ))
    }
  </div>

  <!-- Lightbox / modal -->
  <Modal client:load drawings={drawings}/>
</section>

<!-- Client-only script that sizes rows Google-Photos-style -->
<script client:load>
  /* ---------- layout constants ---------- */
  const TARGET_ROW_HEIGHT = 200;        // preferred row height in px
  const TOLERANCE         = 0.25;       // Â± fractional deviation allowed

  /** computeLayout(imgs, w)
   * Groups imgs into rows whose summed aspect-ratios fit container width.
   * @param {HTMLElement[]} imgs  â€“ all <img> children
   * @param {number}        w     â€“ container width (px)
   * @returns {HTMLElement[][]}   â€“ array of rows (arrays of <img>)
   */
  function computeLayout(imgs, w) {
    const rows = [];
    let cur = [], aspect = 0;

    imgs.forEach(img => {
      const r = img.naturalWidth / img.naturalHeight;
      cur.push(img); aspect += r;

      const rowH = w / aspect;
      if (rowH < TARGET_ROW_HEIGHT * (1 + TOLERANCE)) {
        rows.push(cur); cur = []; aspect = 0;
      }
    });
    if (cur.length) rows.push(cur);
    return rows;
  }

  /** applyLayout(rows, w, gap)
   * Resizes each img so its row spans the full width without gaps.
   */
  function applyLayout(rows, w, gap) {
    rows.forEach(row => {
      const aspect = row.reduce((s, img) => s + img.naturalWidth / img.naturalHeight, 0);
      const rowH   = (w - gap * (row.length - 1)) / aspect;

      // round each width so Î£widths = container width exactly
      const widths = row.map(img => Math.round(rowH * (img.naturalWidth / img.naturalHeight)));
      let delta    = (w - gap * (row.length - 1)) - widths.reduce((s, v) => s + v, 0);

      for (let i = 0; delta !== 0; i = (i + 1) % row.length) {
        widths[i] += delta > 0 ? 1 : -1;
        delta     += delta > 0 ? -1 : 1;
      }

      row.forEach((img, i) => {
        img.style.height = `${rowH}px`;
        img.style.width  = `${widths[i]}px`;
        img.style.flex   = `0 0 ${widths[i]}px`;
      });
    });
  }

  /** initGrid â€“ bootstrap after thumbs load & on resize */
  function initGrid() {
    const container = document.getElementById("photos-grid");
    if (!container) return;

    const imgs = [...container.querySelectorAll("img")];
    const ready = () => {
      const gap = parseFloat(getComputedStyle(container).gap) || 0;
      applyLayout(computeLayout(imgs, container.clientWidth), container.clientWidth, gap);
    };

    let loaded = 0;
    imgs.forEach(img => {
      if (img.complete && img.naturalWidth) loaded++;
      else img.addEventListener("load", () => (++loaded === imgs.length) && ready(), { once:true });
    });
    if (loaded === imgs.length) ready();
    window.addEventListener("resize", ready);
  }
  initGrid();
</script>
